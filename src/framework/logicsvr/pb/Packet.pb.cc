// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#include "Packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr PacketVersion::PacketVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PacketVersionDefaultTypeInternal {
  constexpr PacketVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketVersionDefaultTypeInternal() {}
  union {
    PacketVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketVersionDefaultTypeInternal _PacketVersion_default_instance_;
constexpr RequestPacketPb_ContextEntry_DoNotUse::RequestPacketPb_ContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestPacketPb_ContextEntry_DoNotUseDefaultTypeInternal {
  constexpr RequestPacketPb_ContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPacketPb_ContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RequestPacketPb_ContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPacketPb_ContextEntry_DoNotUseDefaultTypeInternal _RequestPacketPb_ContextEntry_DoNotUse_default_instance_;
constexpr RequestPacketPb_StatusEntry_DoNotUse::RequestPacketPb_StatusEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestPacketPb_StatusEntry_DoNotUseDefaultTypeInternal {
  constexpr RequestPacketPb_StatusEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPacketPb_StatusEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RequestPacketPb_StatusEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPacketPb_StatusEntry_DoNotUseDefaultTypeInternal _RequestPacketPb_StatusEntry_DoNotUse_default_instance_;
constexpr RequestPacketPb::RequestPacketPb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , status_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , sequence_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0)
  , cmd_(0)
  , subcmd_(0){}
struct RequestPacketPbDefaultTypeInternal {
  constexpr RequestPacketPbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPacketPbDefaultTypeInternal() {}
  union {
    RequestPacketPb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPacketPbDefaultTypeInternal _RequestPacketPb_default_instance_;
constexpr ResponsePacketPb_StatusEntry_DoNotUse::ResponsePacketPb_StatusEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResponsePacketPb_StatusEntry_DoNotUseDefaultTypeInternal {
  constexpr ResponsePacketPb_StatusEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsePacketPb_StatusEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResponsePacketPb_StatusEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePacketPb_StatusEntry_DoNotUseDefaultTypeInternal _ResponsePacketPb_StatusEntry_DoNotUse_default_instance_;
constexpr ResponsePacketPb::ResponsePacketPb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , sequence_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0)
  , result_(0){}
struct ResponsePacketPbDefaultTypeInternal {
  constexpr ResponsePacketPbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsePacketPbDefaultTypeInternal() {}
  union {
    ResponsePacketPb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePacketPbDefaultTypeInternal _ResponsePacketPb_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Packet_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Packet_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Packet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PacketVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb_ContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb_ContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb_ContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb_ContextEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb_StatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb_StatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb_StatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb_StatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb, version_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb, sequence_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb, cmd_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb, subcmd_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb, buffer_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb, context_),
  PROTOBUF_FIELD_OFFSET(::RequestPacketPb, status_),
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb_StatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb_StatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb_StatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb_StatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb, version_),
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb, sequence_),
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb, result_),
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb, buffer_),
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb, status_),
  PROTOBUF_FIELD_OFFSET(::ResponsePacketPb, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PacketVersion)},
  { 5, 12, sizeof(::RequestPacketPb_ContextEntry_DoNotUse)},
  { 14, 21, sizeof(::RequestPacketPb_StatusEntry_DoNotUse)},
  { 23, -1, sizeof(::RequestPacketPb)},
  { 35, 42, sizeof(::ResponsePacketPb_StatusEntry_DoNotUse)},
  { 44, -1, sizeof(::ResponsePacketPb)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PacketVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestPacketPb_ContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestPacketPb_StatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestPacketPb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResponsePacketPb_StatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResponsePacketPb_default_instance_),
};

const char descriptor_table_protodef_Packet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Packet.proto\"L\n\rPacketVersion\";\n\007Versi"
  "on\022\016\n\nNO_VERSION\020\000\022\016\n\nV1_VERSION\020\001\022\020\n\013MA"
  "X_VERSION\020\220N\"\236\002\n\017RequestPacketPb\022\017\n\007vers"
  "ion\030\001 \001(\005\022\020\n\010sequence\030\002 \001(\t\022\013\n\003cmd\030\003 \001(\005"
  "\022\016\n\006subcmd\030\004 \001(\005\022\016\n\006buffer\030\005 \001(\014\022.\n\007cont"
  "ext\030\006 \003(\0132\035.RequestPacketPb.ContextEntry"
  "\022,\n\006status\030\007 \003(\0132\034.RequestPacketPb.Statu"
  "sEntry\032.\n\014ContextEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\032-\n\013StatusEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\300\001\n\020ResponsePacket"
  "Pb\022\017\n\007version\030\001 \001(\005\022\020\n\010sequence\030\002 \001(\t\022\016\n"
  "\006result\030\003 \001(\005\022\016\n\006buffer\030\004 \001(\014\022-\n\006status\030"
  "\005 \003(\0132\035.ResponsePacketPb.StatusEntry\022\013\n\003"
  "msg\030\006 \001(\t\032-\n\013StatusEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001B+\n\031com.pccl.library.pro"
  "tocolB\016ProtocolEntityb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Packet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto = {
  false, false, 629, descriptor_table_protodef_Packet_2eproto, "Packet.proto", 
  &descriptor_table_Packet_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_Packet_2eproto::offsets,
  file_level_metadata_Packet_2eproto, file_level_enum_descriptors_Packet_2eproto, file_level_service_descriptors_Packet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Packet_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Packet_2eproto);
  return descriptor_table_Packet_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Packet_2eproto(&descriptor_table_Packet_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketVersion_Version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Packet_2eproto);
  return file_level_enum_descriptors_Packet_2eproto[0];
}
bool PacketVersion_Version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10000:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PacketVersion_Version PacketVersion::NO_VERSION;
constexpr PacketVersion_Version PacketVersion::V1_VERSION;
constexpr PacketVersion_Version PacketVersion::MAX_VERSION;
constexpr PacketVersion_Version PacketVersion::Version_MIN;
constexpr PacketVersion_Version PacketVersion::Version_MAX;
constexpr int PacketVersion::Version_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PacketVersion::_Internal {
 public:
};

PacketVersion::PacketVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PacketVersion)
}
PacketVersion::PacketVersion(const PacketVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PacketVersion)
}

void PacketVersion::SharedCtor() {
}

PacketVersion::~PacketVersion() {
  // @@protoc_insertion_point(destructor:PacketVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PacketVersion::ArenaDtor(void* object) {
  PacketVersion* _this = reinterpret_cast< PacketVersion* >(object);
  (void)_this;
}
void PacketVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:PacketVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PacketVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PacketVersion)
  return target;
}

size_t PacketVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PacketVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PacketVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PacketVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PacketVersion)
    MergeFrom(*source);
  }
}

void PacketVersion::MergeFrom(const PacketVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PacketVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PacketVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PacketVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketVersion::CopyFrom(const PacketVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PacketVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketVersion::IsInitialized() const {
  return true;
}

void PacketVersion::InternalSwap(PacketVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RequestPacketPb_ContextEntry_DoNotUse::RequestPacketPb_ContextEntry_DoNotUse() {}
RequestPacketPb_ContextEntry_DoNotUse::RequestPacketPb_ContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RequestPacketPb_ContextEntry_DoNotUse::MergeFrom(const RequestPacketPb_ContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RequestPacketPb_ContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RequestPacketPb_ContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

RequestPacketPb_StatusEntry_DoNotUse::RequestPacketPb_StatusEntry_DoNotUse() {}
RequestPacketPb_StatusEntry_DoNotUse::RequestPacketPb_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RequestPacketPb_StatusEntry_DoNotUse::MergeFrom(const RequestPacketPb_StatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RequestPacketPb_StatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RequestPacketPb_StatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class RequestPacketPb::_Internal {
 public:
};

RequestPacketPb::RequestPacketPb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  context_(arena),
  status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RequestPacketPb)
}
RequestPacketPb::RequestPacketPb(const RequestPacketPb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  context_.MergeFrom(from.context_);
  status_.MergeFrom(from.status_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence().empty()) {
    sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence(), 
      GetArena());
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&subcmd_) -
    reinterpret_cast<char*>(&version_)) + sizeof(subcmd_));
  // @@protoc_insertion_point(copy_constructor:RequestPacketPb)
}

void RequestPacketPb::SharedCtor() {
sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subcmd_) -
    reinterpret_cast<char*>(&version_)) + sizeof(subcmd_));
}

RequestPacketPb::~RequestPacketPb() {
  // @@protoc_insertion_point(destructor:RequestPacketPb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestPacketPb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestPacketPb::ArenaDtor(void* object) {
  RequestPacketPb* _this = reinterpret_cast< RequestPacketPb* >(object);
  (void)_this;
}
void RequestPacketPb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPacketPb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPacketPb::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestPacketPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_.Clear();
  status_.Clear();
  sequence_.ClearToEmpty();
  buffer_.ClearToEmpty();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subcmd_) -
      reinterpret_cast<char*>(&version_)) + sizeof(subcmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPacketPb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RequestPacketPb.sequence"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subcmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subcmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buffer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPacketPb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestPacketPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestPacketPb.sequence");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequence(), target);
  }

  // int32 cmd = 3;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cmd(), target);
  }

  // int32 subcmd = 4;
  if (this->subcmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subcmd(), target);
  }

  // bytes buffer = 5;
  if (this->buffer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buffer(), target);
  }

  // map<string, string> context = 6;
  if (!this->_internal_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RequestPacketPb.ContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RequestPacketPb.ContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_context().begin();
          it != this->_internal_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RequestPacketPb_ContextEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_context().begin();
          it != this->_internal_context().end(); ++it) {
        target = RequestPacketPb_ContextEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> status = 7;
  if (!this->_internal_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RequestPacketPb.StatusEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RequestPacketPb.StatusEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RequestPacketPb_StatusEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it) {
        target = RequestPacketPb_StatusEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestPacketPb)
  return target;
}

size_t RequestPacketPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestPacketPb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> context = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_context().begin();
      it != this->_internal_context().end(); ++it) {
    total_size += RequestPacketPb_ContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> status = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_status().begin();
      it != this->_internal_status().end(); ++it) {
    total_size += RequestPacketPb_StatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  // bytes buffer = 5;
  if (this->buffer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 cmd = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmd());
  }

  // int32 subcmd = 4;
  if (this->subcmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subcmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPacketPb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestPacketPb)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPacketPb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestPacketPb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestPacketPb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestPacketPb)
    MergeFrom(*source);
  }
}

void RequestPacketPb::MergeFrom(const RequestPacketPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestPacketPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_.MergeFrom(from.context_);
  status_.MergeFrom(from.status_);
  if (from.sequence().size() > 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.buffer().size() > 0) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.subcmd() != 0) {
    _internal_set_subcmd(from._internal_subcmd());
  }
}

void RequestPacketPb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestPacketPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPacketPb::CopyFrom(const RequestPacketPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestPacketPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPacketPb::IsInitialized() const {
  return true;
}

void RequestPacketPb::InternalSwap(RequestPacketPb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  context_.Swap(&other->context_);
  status_.Swap(&other->status_);
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buffer_.Swap(&other->buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestPacketPb, subcmd_)
      + sizeof(RequestPacketPb::subcmd_)
      - PROTOBUF_FIELD_OFFSET(RequestPacketPb, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPacketPb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ResponsePacketPb_StatusEntry_DoNotUse::ResponsePacketPb_StatusEntry_DoNotUse() {}
ResponsePacketPb_StatusEntry_DoNotUse::ResponsePacketPb_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResponsePacketPb_StatusEntry_DoNotUse::MergeFrom(const ResponsePacketPb_StatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResponsePacketPb_StatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ResponsePacketPb_StatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ResponsePacketPb::_Internal {
 public:
};

ResponsePacketPb::ResponsePacketPb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ResponsePacketPb)
}
ResponsePacketPb::ResponsePacketPb(const ResponsePacketPb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.MergeFrom(from.status_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence().empty()) {
    sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence(), 
      GetArena());
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArena());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&version_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:ResponsePacketPb)
}

void ResponsePacketPb::SharedCtor() {
sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&version_)) + sizeof(result_));
}

ResponsePacketPb::~ResponsePacketPb() {
  // @@protoc_insertion_point(destructor:ResponsePacketPb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponsePacketPb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponsePacketPb::ArenaDtor(void* object) {
  ResponsePacketPb* _this = reinterpret_cast< ResponsePacketPb* >(object);
  (void)_this;
}
void ResponsePacketPb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsePacketPb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponsePacketPb::Clear() {
// @@protoc_insertion_point(message_clear_start:ResponsePacketPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  sequence_.ClearToEmpty();
  buffer_.ClearToEmpty();
  msg_.ClearToEmpty();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&version_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePacketPb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ResponsePacketPb.sequence"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ResponsePacketPb.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePacketPb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResponsePacketPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResponsePacketPb.sequence");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequence(), target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  // bytes buffer = 4;
  if (this->buffer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buffer(), target);
  }

  // map<string, string> status = 5;
  if (!this->_internal_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ResponsePacketPb.StatusEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ResponsePacketPb.StatusEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResponsePacketPb_StatusEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it) {
        target = ResponsePacketPb_StatusEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string msg = 6;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResponsePacketPb.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponsePacketPb)
  return target;
}

size_t ResponsePacketPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResponsePacketPb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> status = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_status().begin();
      it != this->_internal_status().end(); ++it) {
    total_size += ResponsePacketPb_StatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  // bytes buffer = 4;
  if (this->buffer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // string msg = 6;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePacketPb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResponsePacketPb)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePacketPb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePacketPb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResponsePacketPb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResponsePacketPb)
    MergeFrom(*source);
  }
}

void ResponsePacketPb::MergeFrom(const ResponsePacketPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResponsePacketPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  if (from.sequence().size() > 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.buffer().size() > 0) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ResponsePacketPb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResponsePacketPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePacketPb::CopyFrom(const ResponsePacketPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResponsePacketPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePacketPb::IsInitialized() const {
  return true;
}

void ResponsePacketPb::InternalSwap(ResponsePacketPb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_);
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buffer_.Swap(&other->buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsePacketPb, result_)
      + sizeof(ResponsePacketPb::result_)
      - PROTOBUF_FIELD_OFFSET(ResponsePacketPb, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePacketPb::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PacketVersion* Arena::CreateMaybeMessage< ::PacketVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PacketVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestPacketPb_ContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::RequestPacketPb_ContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestPacketPb_ContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestPacketPb_StatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::RequestPacketPb_StatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestPacketPb_StatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestPacketPb* Arena::CreateMaybeMessage< ::RequestPacketPb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestPacketPb >(arena);
}
template<> PROTOBUF_NOINLINE ::ResponsePacketPb_StatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::ResponsePacketPb_StatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResponsePacketPb_StatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ResponsePacketPb* Arena::CreateMaybeMessage< ::ResponsePacketPb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResponsePacketPb >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
