// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Packet_2eproto_metadata_getter(int index);
class PacketVersion;
struct PacketVersionDefaultTypeInternal;
extern PacketVersionDefaultTypeInternal _PacketVersion_default_instance_;
class RequestPacketPb;
struct RequestPacketPbDefaultTypeInternal;
extern RequestPacketPbDefaultTypeInternal _RequestPacketPb_default_instance_;
class RequestPacketPb_ContextEntry_DoNotUse;
struct RequestPacketPb_ContextEntry_DoNotUseDefaultTypeInternal;
extern RequestPacketPb_ContextEntry_DoNotUseDefaultTypeInternal _RequestPacketPb_ContextEntry_DoNotUse_default_instance_;
class RequestPacketPb_StatusEntry_DoNotUse;
struct RequestPacketPb_StatusEntry_DoNotUseDefaultTypeInternal;
extern RequestPacketPb_StatusEntry_DoNotUseDefaultTypeInternal _RequestPacketPb_StatusEntry_DoNotUse_default_instance_;
class ResponsePacketPb;
struct ResponsePacketPbDefaultTypeInternal;
extern ResponsePacketPbDefaultTypeInternal _ResponsePacketPb_default_instance_;
class ResponsePacketPb_StatusEntry_DoNotUse;
struct ResponsePacketPb_StatusEntry_DoNotUseDefaultTypeInternal;
extern ResponsePacketPb_StatusEntry_DoNotUseDefaultTypeInternal _ResponsePacketPb_StatusEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PacketVersion* Arena::CreateMaybeMessage<::PacketVersion>(Arena*);
template<> ::RequestPacketPb* Arena::CreateMaybeMessage<::RequestPacketPb>(Arena*);
template<> ::RequestPacketPb_ContextEntry_DoNotUse* Arena::CreateMaybeMessage<::RequestPacketPb_ContextEntry_DoNotUse>(Arena*);
template<> ::RequestPacketPb_StatusEntry_DoNotUse* Arena::CreateMaybeMessage<::RequestPacketPb_StatusEntry_DoNotUse>(Arena*);
template<> ::ResponsePacketPb* Arena::CreateMaybeMessage<::ResponsePacketPb>(Arena*);
template<> ::ResponsePacketPb_StatusEntry_DoNotUse* Arena::CreateMaybeMessage<::ResponsePacketPb_StatusEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PacketVersion_Version : int {
  PacketVersion_Version_NO_VERSION = 0,
  PacketVersion_Version_V1_VERSION = 1,
  PacketVersion_Version_MAX_VERSION = 10000,
  PacketVersion_Version_PacketVersion_Version_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketVersion_Version_PacketVersion_Version_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketVersion_Version_IsValid(int value);
constexpr PacketVersion_Version PacketVersion_Version_Version_MIN = PacketVersion_Version_NO_VERSION;
constexpr PacketVersion_Version PacketVersion_Version_Version_MAX = PacketVersion_Version_MAX_VERSION;
constexpr int PacketVersion_Version_Version_ARRAYSIZE = PacketVersion_Version_Version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketVersion_Version_descriptor();
template<typename T>
inline const std::string& PacketVersion_Version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketVersion_Version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketVersion_Version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketVersion_Version_descriptor(), enum_t_value);
}
inline bool PacketVersion_Version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketVersion_Version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketVersion_Version>(
    PacketVersion_Version_descriptor(), name, value);
}
// ===================================================================

class PacketVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketVersion) */ {
 public:
  inline PacketVersion() : PacketVersion(nullptr) {}
  virtual ~PacketVersion();
  explicit constexpr PacketVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketVersion(const PacketVersion& from);
  PacketVersion(PacketVersion&& from) noexcept
    : PacketVersion() {
    *this = ::std::move(from);
  }

  inline PacketVersion& operator=(const PacketVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketVersion& operator=(PacketVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketVersion* internal_default_instance() {
    return reinterpret_cast<const PacketVersion*>(
               &_PacketVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketVersion& a, PacketVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketVersion* New() const final {
    return CreateMaybeMessage<PacketVersion>(nullptr);
  }

  PacketVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketVersion& from);
  void MergeFrom(const PacketVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketVersion";
  }
  protected:
  explicit PacketVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef PacketVersion_Version Version;
  static constexpr Version NO_VERSION =
    PacketVersion_Version_NO_VERSION;
  static constexpr Version V1_VERSION =
    PacketVersion_Version_V1_VERSION;
  static constexpr Version MAX_VERSION =
    PacketVersion_Version_MAX_VERSION;
  static inline bool Version_IsValid(int value) {
    return PacketVersion_Version_IsValid(value);
  }
  static constexpr Version Version_MIN =
    PacketVersion_Version_Version_MIN;
  static constexpr Version Version_MAX =
    PacketVersion_Version_Version_MAX;
  static constexpr int Version_ARRAYSIZE =
    PacketVersion_Version_Version_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Version_descriptor() {
    return PacketVersion_Version_descriptor();
  }
  template<typename T>
  static inline const std::string& Version_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Version>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Version_Name.");
    return PacketVersion_Version_Name(enum_t_value);
  }
  static inline bool Version_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Version* value) {
    return PacketVersion_Version_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PacketVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RequestPacketPb_ContextEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RequestPacketPb_ContextEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RequestPacketPb_ContextEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  RequestPacketPb_ContextEntry_DoNotUse();
  explicit constexpr RequestPacketPb_ContextEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RequestPacketPb_ContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RequestPacketPb_ContextEntry_DoNotUse& other);
  static const RequestPacketPb_ContextEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RequestPacketPb_ContextEntry_DoNotUse*>(&_RequestPacketPb_ContextEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RequestPacketPb.ContextEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RequestPacketPb.ContextEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class RequestPacketPb_StatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RequestPacketPb_StatusEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RequestPacketPb_StatusEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  RequestPacketPb_StatusEntry_DoNotUse();
  explicit constexpr RequestPacketPb_StatusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RequestPacketPb_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RequestPacketPb_StatusEntry_DoNotUse& other);
  static const RequestPacketPb_StatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RequestPacketPb_StatusEntry_DoNotUse*>(&_RequestPacketPb_StatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RequestPacketPb.StatusEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RequestPacketPb.StatusEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class RequestPacketPb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestPacketPb) */ {
 public:
  inline RequestPacketPb() : RequestPacketPb(nullptr) {}
  virtual ~RequestPacketPb();
  explicit constexpr RequestPacketPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPacketPb(const RequestPacketPb& from);
  RequestPacketPb(RequestPacketPb&& from) noexcept
    : RequestPacketPb() {
    *this = ::std::move(from);
  }

  inline RequestPacketPb& operator=(const RequestPacketPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPacketPb& operator=(RequestPacketPb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestPacketPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPacketPb* internal_default_instance() {
    return reinterpret_cast<const RequestPacketPb*>(
               &_RequestPacketPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestPacketPb& a, RequestPacketPb& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPacketPb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPacketPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestPacketPb* New() const final {
    return CreateMaybeMessage<RequestPacketPb>(nullptr);
  }

  RequestPacketPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestPacketPb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestPacketPb& from);
  void MergeFrom(const RequestPacketPb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPacketPb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestPacketPb";
  }
  protected:
  explicit RequestPacketPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 6,
    kStatusFieldNumber = 7,
    kSequenceFieldNumber = 2,
    kBufferFieldNumber = 5,
    kVersionFieldNumber = 1,
    kCmdFieldNumber = 3,
    kSubcmdFieldNumber = 4,
  };
  // map<string, string> context = 6;
  int context_size() const;
  private:
  int _internal_context_size() const;
  public:
  void clear_context();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_context() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_context();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      context() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_context();

  // map<string, string> status = 7;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_status();

  // string sequence = 2;
  void clear_sequence();
  const std::string& sequence() const;
  void set_sequence(const std::string& value);
  void set_sequence(std::string&& value);
  void set_sequence(const char* value);
  void set_sequence(const char* value, size_t size);
  std::string* mutable_sequence();
  std::string* release_sequence();
  void set_allocated_sequence(std::string* sequence);
  private:
  const std::string& _internal_sequence() const;
  void _internal_set_sequence(const std::string& value);
  std::string* _internal_mutable_sequence();
  public:

  // bytes buffer = 5;
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cmd = 3;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 subcmd = 4;
  void clear_subcmd();
  ::PROTOBUF_NAMESPACE_ID::int32 subcmd() const;
  void set_subcmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subcmd() const;
  void _internal_set_subcmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RequestPacketPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RequestPacketPb_ContextEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> context_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RequestPacketPb_StatusEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
  ::PROTOBUF_NAMESPACE_ID::int32 subcmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class ResponsePacketPb_StatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResponsePacketPb_StatusEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResponsePacketPb_StatusEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ResponsePacketPb_StatusEntry_DoNotUse();
  explicit constexpr ResponsePacketPb_StatusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ResponsePacketPb_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ResponsePacketPb_StatusEntry_DoNotUse& other);
  static const ResponsePacketPb_StatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResponsePacketPb_StatusEntry_DoNotUse*>(&_ResponsePacketPb_StatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ResponsePacketPb.StatusEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ResponsePacketPb.StatusEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class ResponsePacketPb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResponsePacketPb) */ {
 public:
  inline ResponsePacketPb() : ResponsePacketPb(nullptr) {}
  virtual ~ResponsePacketPb();
  explicit constexpr ResponsePacketPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePacketPb(const ResponsePacketPb& from);
  ResponsePacketPb(ResponsePacketPb&& from) noexcept
    : ResponsePacketPb() {
    *this = ::std::move(from);
  }

  inline ResponsePacketPb& operator=(const ResponsePacketPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePacketPb& operator=(ResponsePacketPb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponsePacketPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePacketPb* internal_default_instance() {
    return reinterpret_cast<const ResponsePacketPb*>(
               &_ResponsePacketPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponsePacketPb& a, ResponsePacketPb& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePacketPb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePacketPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponsePacketPb* New() const final {
    return CreateMaybeMessage<ResponsePacketPb>(nullptr);
  }

  ResponsePacketPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePacketPb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponsePacketPb& from);
  void MergeFrom(const ResponsePacketPb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePacketPb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResponsePacketPb";
  }
  protected:
  explicit ResponsePacketPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 5,
    kSequenceFieldNumber = 2,
    kBufferFieldNumber = 4,
    kMsgFieldNumber = 6,
    kVersionFieldNumber = 1,
    kResultFieldNumber = 3,
  };
  // map<string, string> status = 5;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_status();

  // string sequence = 2;
  void clear_sequence();
  const std::string& sequence() const;
  void set_sequence(const std::string& value);
  void set_sequence(std::string&& value);
  void set_sequence(const char* value);
  void set_sequence(const char* value, size_t size);
  std::string* mutable_sequence();
  std::string* release_sequence();
  void set_allocated_sequence(std::string* sequence);
  private:
  const std::string& _internal_sequence() const;
  void _internal_set_sequence(const std::string& value);
  std::string* _internal_mutable_sequence();
  public:

  // bytes buffer = 4;
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // string msg = 6;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ResponsePacketPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ResponsePacketPb_StatusEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketVersion

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RequestPacketPb

// int32 version = 1;
inline void RequestPacketPb::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPacketPb::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPacketPb::version() const {
  // @@protoc_insertion_point(field_get:RequestPacketPb.version)
  return _internal_version();
}
inline void RequestPacketPb::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void RequestPacketPb::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:RequestPacketPb.version)
}

// string sequence = 2;
inline void RequestPacketPb::clear_sequence() {
  sequence_.ClearToEmpty();
}
inline const std::string& RequestPacketPb::sequence() const {
  // @@protoc_insertion_point(field_get:RequestPacketPb.sequence)
  return _internal_sequence();
}
inline void RequestPacketPb::set_sequence(const std::string& value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:RequestPacketPb.sequence)
}
inline std::string* RequestPacketPb::mutable_sequence() {
  // @@protoc_insertion_point(field_mutable:RequestPacketPb.sequence)
  return _internal_mutable_sequence();
}
inline const std::string& RequestPacketPb::_internal_sequence() const {
  return sequence_.Get();
}
inline void RequestPacketPb::_internal_set_sequence(const std::string& value) {
  
  sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestPacketPb::set_sequence(std::string&& value) {
  
  sequence_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RequestPacketPb.sequence)
}
inline void RequestPacketPb::set_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RequestPacketPb.sequence)
}
inline void RequestPacketPb::set_sequence(const char* value,
    size_t size) {
  
  sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RequestPacketPb.sequence)
}
inline std::string* RequestPacketPb::_internal_mutable_sequence() {
  
  return sequence_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestPacketPb::release_sequence() {
  // @@protoc_insertion_point(field_release:RequestPacketPb.sequence)
  return sequence_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestPacketPb::set_allocated_sequence(std::string* sequence) {
  if (sequence != nullptr) {
    
  } else {
    
  }
  sequence_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RequestPacketPb.sequence)
}

// int32 cmd = 3;
inline void RequestPacketPb::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPacketPb::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPacketPb::cmd() const {
  // @@protoc_insertion_point(field_get:RequestPacketPb.cmd)
  return _internal_cmd();
}
inline void RequestPacketPb::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_ = value;
}
inline void RequestPacketPb::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:RequestPacketPb.cmd)
}

// int32 subcmd = 4;
inline void RequestPacketPb::clear_subcmd() {
  subcmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPacketPb::_internal_subcmd() const {
  return subcmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPacketPb::subcmd() const {
  // @@protoc_insertion_point(field_get:RequestPacketPb.subcmd)
  return _internal_subcmd();
}
inline void RequestPacketPb::_internal_set_subcmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subcmd_ = value;
}
inline void RequestPacketPb::set_subcmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subcmd(value);
  // @@protoc_insertion_point(field_set:RequestPacketPb.subcmd)
}

// bytes buffer = 5;
inline void RequestPacketPb::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& RequestPacketPb::buffer() const {
  // @@protoc_insertion_point(field_get:RequestPacketPb.buffer)
  return _internal_buffer();
}
inline void RequestPacketPb::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:RequestPacketPb.buffer)
}
inline std::string* RequestPacketPb::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:RequestPacketPb.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& RequestPacketPb::_internal_buffer() const {
  return buffer_.Get();
}
inline void RequestPacketPb::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestPacketPb::set_buffer(std::string&& value) {
  
  buffer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RequestPacketPb.buffer)
}
inline void RequestPacketPb::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RequestPacketPb.buffer)
}
inline void RequestPacketPb::set_buffer(const void* value,
    size_t size) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RequestPacketPb.buffer)
}
inline std::string* RequestPacketPb::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestPacketPb::release_buffer() {
  // @@protoc_insertion_point(field_release:RequestPacketPb.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestPacketPb::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RequestPacketPb.buffer)
}

// map<string, string> context = 6;
inline int RequestPacketPb::_internal_context_size() const {
  return context_.size();
}
inline int RequestPacketPb::context_size() const {
  return _internal_context_size();
}
inline void RequestPacketPb::clear_context() {
  context_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RequestPacketPb::_internal_context() const {
  return context_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RequestPacketPb::context() const {
  // @@protoc_insertion_point(field_map:RequestPacketPb.context)
  return _internal_context();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RequestPacketPb::_internal_mutable_context() {
  return context_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RequestPacketPb::mutable_context() {
  // @@protoc_insertion_point(field_mutable_map:RequestPacketPb.context)
  return _internal_mutable_context();
}

// map<string, string> status = 7;
inline int RequestPacketPb::_internal_status_size() const {
  return status_.size();
}
inline int RequestPacketPb::status_size() const {
  return _internal_status_size();
}
inline void RequestPacketPb::clear_status() {
  status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RequestPacketPb::_internal_status() const {
  return status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RequestPacketPb::status() const {
  // @@protoc_insertion_point(field_map:RequestPacketPb.status)
  return _internal_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RequestPacketPb::_internal_mutable_status() {
  return status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RequestPacketPb::mutable_status() {
  // @@protoc_insertion_point(field_mutable_map:RequestPacketPb.status)
  return _internal_mutable_status();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResponsePacketPb

// int32 version = 1;
inline void ResponsePacketPb::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePacketPb::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePacketPb::version() const {
  // @@protoc_insertion_point(field_get:ResponsePacketPb.version)
  return _internal_version();
}
inline void ResponsePacketPb::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void ResponsePacketPb::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ResponsePacketPb.version)
}

// string sequence = 2;
inline void ResponsePacketPb::clear_sequence() {
  sequence_.ClearToEmpty();
}
inline const std::string& ResponsePacketPb::sequence() const {
  // @@protoc_insertion_point(field_get:ResponsePacketPb.sequence)
  return _internal_sequence();
}
inline void ResponsePacketPb::set_sequence(const std::string& value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ResponsePacketPb.sequence)
}
inline std::string* ResponsePacketPb::mutable_sequence() {
  // @@protoc_insertion_point(field_mutable:ResponsePacketPb.sequence)
  return _internal_mutable_sequence();
}
inline const std::string& ResponsePacketPb::_internal_sequence() const {
  return sequence_.Get();
}
inline void ResponsePacketPb::_internal_set_sequence(const std::string& value) {
  
  sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponsePacketPb::set_sequence(std::string&& value) {
  
  sequence_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ResponsePacketPb.sequence)
}
inline void ResponsePacketPb::set_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ResponsePacketPb.sequence)
}
inline void ResponsePacketPb::set_sequence(const char* value,
    size_t size) {
  
  sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ResponsePacketPb.sequence)
}
inline std::string* ResponsePacketPb::_internal_mutable_sequence() {
  
  return sequence_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponsePacketPb::release_sequence() {
  // @@protoc_insertion_point(field_release:ResponsePacketPb.sequence)
  return sequence_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponsePacketPb::set_allocated_sequence(std::string* sequence) {
  if (sequence != nullptr) {
    
  } else {
    
  }
  sequence_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ResponsePacketPb.sequence)
}

// int32 result = 3;
inline void ResponsePacketPb::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePacketPb::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePacketPb::result() const {
  // @@protoc_insertion_point(field_get:ResponsePacketPb.result)
  return _internal_result();
}
inline void ResponsePacketPb::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ResponsePacketPb::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ResponsePacketPb.result)
}

// bytes buffer = 4;
inline void ResponsePacketPb::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& ResponsePacketPb::buffer() const {
  // @@protoc_insertion_point(field_get:ResponsePacketPb.buffer)
  return _internal_buffer();
}
inline void ResponsePacketPb::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:ResponsePacketPb.buffer)
}
inline std::string* ResponsePacketPb::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:ResponsePacketPb.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& ResponsePacketPb::_internal_buffer() const {
  return buffer_.Get();
}
inline void ResponsePacketPb::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponsePacketPb::set_buffer(std::string&& value) {
  
  buffer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ResponsePacketPb.buffer)
}
inline void ResponsePacketPb::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ResponsePacketPb.buffer)
}
inline void ResponsePacketPb::set_buffer(const void* value,
    size_t size) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ResponsePacketPb.buffer)
}
inline std::string* ResponsePacketPb::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponsePacketPb::release_buffer() {
  // @@protoc_insertion_point(field_release:ResponsePacketPb.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponsePacketPb::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ResponsePacketPb.buffer)
}

// map<string, string> status = 5;
inline int ResponsePacketPb::_internal_status_size() const {
  return status_.size();
}
inline int ResponsePacketPb::status_size() const {
  return _internal_status_size();
}
inline void ResponsePacketPb::clear_status() {
  status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ResponsePacketPb::_internal_status() const {
  return status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ResponsePacketPb::status() const {
  // @@protoc_insertion_point(field_map:ResponsePacketPb.status)
  return _internal_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ResponsePacketPb::_internal_mutable_status() {
  return status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ResponsePacketPb::mutable_status() {
  // @@protoc_insertion_point(field_mutable_map:ResponsePacketPb.status)
  return _internal_mutable_status();
}

// string msg = 6;
inline void ResponsePacketPb::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ResponsePacketPb::msg() const {
  // @@protoc_insertion_point(field_get:ResponsePacketPb.msg)
  return _internal_msg();
}
inline void ResponsePacketPb::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:ResponsePacketPb.msg)
}
inline std::string* ResponsePacketPb::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ResponsePacketPb.msg)
  return _internal_mutable_msg();
}
inline const std::string& ResponsePacketPb::_internal_msg() const {
  return msg_.Get();
}
inline void ResponsePacketPb::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponsePacketPb::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ResponsePacketPb.msg)
}
inline void ResponsePacketPb::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ResponsePacketPb.msg)
}
inline void ResponsePacketPb::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ResponsePacketPb.msg)
}
inline std::string* ResponsePacketPb::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponsePacketPb::release_msg() {
  // @@protoc_insertion_point(field_release:ResponsePacketPb.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponsePacketPb::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ResponsePacketPb.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PacketVersion_Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PacketVersion_Version>() {
  return ::PacketVersion_Version_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
